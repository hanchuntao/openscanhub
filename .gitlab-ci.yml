### Sequence 1 ###

lint:
  needs: []
  tags:
    - shared
  image: "quay.io/fedora/fedora:37"
  before_script:
    - dnf install -y pre-commit make git-core
  script:
    - git remote -v | grep -q 'covscan.*covscan/covscan' || git remote add covscan https://gitlab.cee.redhat.com/covscan/covscan
    - GIT_SSL_NO_VERIFY=true git fetch covscan
    - GIT_SSL_NO_VERIFY=true make lint REPO=covscan

### Sequence 2 ###

django-unit-tests:
  tags:
    - covscan-ci-runner
  artifacts:
    expose_as: "Django Unit Tests Coverage"
    paths:
      - htmlcov/
  before_script:
    - git clone --depth 1 https://github.com/release-engineering/kobo.git
    - containers/scripts/init-db.sh --deploy --force --minimal
    - podman exec -it db psql -c 'ALTER USER covscanhub CREATEDB;'
  script:
    - podman exec -it osh-hub /usr/bin/coverage-3.6 run --omit="*site-packages*,*kobo*," osh/hub/manage.py test -v 3 || exit 1
    - podman exec -it osh-hub /usr/bin/coverage-3.6 html
  after_script:
    - podman-compose logs db
    - podman-compose logs osh-hub
    # must specify the containers as podman-compose down has no idea the client hasn't been prepared
    - podman-compose down db osh-hub osh-worker

### Sequence 3 ###

integration-tests:
  tags:
    - covscan-ci-runner
  artifacts:
    expose_as: "Integration Tests Coverage"
    paths:
      - htmlcov/
  before_script:
    - git clone --depth 1 https://github.com/release-engineering/kobo.git
  script:
    - sed -i "s/RUN_TASKS_IN_FOREGROUND = 0/RUN_TASKS_IN_FOREGROUND = 1/g"  osh/worker/worker-local.conf
    - containers/scripts/generate_integration_test_coverage.sh --force
  after_script:
    - podman-compose down

### Sequence 4 ###

build-rpms-on-copr-and-test:
  needs: []
  tags:
    - gitlab-ci-build-on-copr
  before_script:
    # guard job sequence
    - dnf install -y python3-pip
    - python3 -m pip install setuptools
    # actual job starts
    - mkdir -p ~/.config
    - echo "[copr-cli]" > ~/.config/rhcopr
    - echo -n "username = " >> ~/.config/rhcopr
    - echo "$COPR_CLI_USERNAME" | base64 --decode >> ~/.config/rhcopr
    - echo -n "token = " >> ~/.config/rhcopr
    - echo "$COPR_CLI_TOKEN" | base64 --decode >> ~/.config/rhcopr
    - echo -n "login = " >> ~/.config/rhcopr
    - echo "$COPR_CLI_LOGIN" | base64 --decode >> ~/.config/rhcopr
    - echo -n "copr_url = " >> ~/.config/rhcopr
    - echo "$COPR_CLI_COPR_URL" | base64 --decode >> ~/.config/rhcopr
    # We are making lots of tweaks in configurations while setting up this job, which may cause
    # issues with SELinux. Keep SELinux in permissive mode and fix any SELinux warnings before
    # enabling it in future.
    - setenforce 0
    - dnf remove -y $(rpm -qa | grep -i covscan)
    - systemctl status
  script:
    - cp containers/rhel-8-pulp.repo containers/rcm-tools-for-rhel-8.repo /etc/yum.repos.d/
    - (cd /etc/yum.repos.d/ && curl -O https://copr.devel.redhat.com/coprs/kdudka/mock/repo/epel-8/kdudka-mock-epel-8.repo)
    - dnf install -y findutils git make openssl python36 python3-dnf-plugins-core python3-setuptools rpm-build postgresql-server
    - dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
    - dnf copr enable @copr/copr -y
    - dnf copr enable copr.devel.redhat.com/rhcopr-project/toolset -y
    - dnf copr enable redhat/kdudka/covscan-testing -y
    - dnf install -y rhcopr
    - make srpm
    - (set -o pipefail; rhcopr build gitlab-ci-build-on-copr *.src.rpm | tee rhcopr-build.log)
    - copr_url=$(grep "https://copr.*coprs/build/" rhcopr-build.log)
    - build_id=$(basename $copr_url)
    - rhcopr download-build $build_id -r epel-8-x86_64
    - dnf install -y $(ls epel-8-x86_64/*.rpm | grep -v "stage\|prod\|src")
    - systemctl stop httpd postgresql
    # setup covscanhub settings
    - cp osh/hub/settings_local.stage.py /usr/lib/python3.6/site-packages/osh/hub/settings_local.py
    - sed -i "s/\['covscan.lab.eng.brq2.redhat.com'\]/\['*'\]/" /usr/lib/python3.6/site-packages/osh/hub/settings_local.py
    # setup postgresql
    - mv -fvT --backup=numbered /var/lib/pgsql/data/ /root/pgsql-data
    - postgresql-setup --initdb
    - sed -e 's|ident$|md5|' -i /var/lib/pgsql/data/pg_hba.conf
    - systemctl start postgresql
    - scripts/setup_db.sh
    # csmock user is required to run builds
    - adduser csmock -G mock || true
    # Enable below line if SELinux is in restrictive mode
    # setsebool -P httpd_can_network_connect 1
    # Set up self signed certificate before starting httpd
    - (cd /etc/httpd/conf && openssl req -newkey rsa:4096 -nodes -keyout localhost.key -x509 -sha256 -days 365 -addext "subjectAltName = DNS:localhost, DNS:localhost, DNS:127.0.0.1" -subj "/C=CZ/ST=/L=/O=Red Hat/OU=Plumbers/CN=localhost" -out localhost.crt)
    - cp /etc/httpd/conf/localhost.crt /etc/pki/ca-trust/source/anchors/ && update-ca-trust
    - cp osh/hub/osh-hub-httpd.conf /etc/httpd/conf.d/osh-hub-httpd.conf
    - touch /var/log/osh/hub/hub.log && chown apache:apache /var/log/osh/hub/hub.log
    - systemctl start httpd covscand
    # Enable below lines if firewall is enabled
    # firewall-cmd --zone=public --add-port=80/tcp --permanent
    # firewall-cmd --zone=public --add-port=443/tcp --permanent
    # firewall-cmd --reload
    - sed -i "s|http://osh-hub:8000|https://localhost/covscanhub|g" osh/client/client-local.conf
    - OSH_CLIENT_CONFIG_FILE=osh/client/client-local.conf /usr/bin/osh-cli mock-build --config=fedora-36-x86_64 --brew-build units-2.21-4.fc36
    - OSH_CLIENT_CONFIG_FILE=osh/client/client-local.conf /usr/bin/osh-cli task-info 1 | grep "is_failed = False"
    - osh/hub/scripts/osh-xmlrpc-client.py --hub "https://localhost/covscanhub/xmlrpc/kerbauth/" --username=user --password=xxxxxx create-scan -b python-six-1.3.0-4.el7 -t python-six-1.9.0-2.el7 --et-scan-id=1 --release=RHEL-7.2.0 --owner=admin --advisory-id=1

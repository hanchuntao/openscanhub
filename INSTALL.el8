- install an el8 server

- enable CRB repo

- install internal CA:
    # cd /etc/pki/ca-trust/source/anchors/ \
        && curl -O https://password.corp.redhat.com/RH-IT-Root-CA.crt \
        && update-ca-trust

- enable EPEL-8 and Covscan repos:
    # yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
    # cd /etc/yum.repos.d \
        && curl -O https://copr.devel.redhat.com/coprs/kdudka/mock/repo/epel-8/kdudka-mock-epel-8.repo \
        && curl -O https://copr.devel.redhat.com/coprs/mmuzila/covscan-testing-8/repo/epel-8/mmuzila-covscan-testing-8-epel-8.repo


- install covscanhub (TODO: make sure that boost-python3 gets installed)
    # yum install python3-covscan-hub-prod


- edit /etc/httpd/conf.d/covscanhub-httpd.conf if needed

- edit ALLOWED_HOSTS at /usr/lib/python3.6/site-packages/covscanhub/settings.py
    TODO: move the above configuration to settings_local.py ?

- start httpd:
    # setsebool -P httpd_can_network_connect 1
    # systemctl enable --now httpd
    # firewall-cmd --zone=public --add-port=80/tcp --permanent
    # firewall-cmd --zone=public --add-port=443/tcp --permanent
    # firewall-cmd --reload

- http://covscan-dev/covscanhub should show up now

- install and run postgresql
    # yum install postgresql-server
    # postgresql-setup initdb
    # vim /var/lib/pgsql/data/pg_hba.conf
        # TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
        local   all         postgres                          ident
        # "local" is for Unix domain socket connections only
        local   all         all                               md5
        # IPv4 local connections:
        host    all         all         127.0.0.1/32          md5
        # IPv6 local connections:
        host    all         all         ::1/128               md5

    # systemctl enable --now postgresql
    # su - postgres -c psql
        CREATE DATABASE covscanhub;
        CREATE USER "covscanhub" WITH PASSWORD 'velryba';
        GRANT ALL PRIVILEGES ON DATABASE "covscanhub" to "covscanhub";

- if creating new database:
    # python3 /usr/lib/python3.6/site-packages/covscanhub/manage.py migrate

- if restoring from db dump
    # sudo -u postgres psql covscanhub < <db_dump>
    # python3 /usr/lib/python3.6/site-packages/covscanhub/manage.py migrate --fake-init

    If upgrading from old (pre 2021) covscan database, previous command will
    end up with an error. Table "django_migrations" (I don't know why) does not
    contain records about previous migrations. They must be entered manually one
    by one always followed bu running previous command, depending on the error
    the previous command ends with.
        # psql -U covscanhub covscanhub

    list of possible commands:

        > insert into django_migrations (app, name, applied) values('hub', '0002_auto_20150722_0612', now());
        > insert into django_migrations (app, name, applied) values('hub', '0003_auto_20160202_0647', now());
        > insert into django_migrations (app, name, applied) values('errata', '0002_auto_20190611_1325', now());
        > insert into django_migrations (app, name, applied) values('scan', '0002_auto_20190611_1325', now());

- http://covscan-dev/covscanhub/task/ should now show up!

- set KRB_AUTH_PRINCIPAL at /usr/lib/python3.6/site-packages/covscanhub/settings_local.py

- edit kerberos settings at /etc/httpd/covscanhub-httpd.conf

- create users:
    # python3 /usr/lib/python3.6/site-packages/covscanhub/manage.py shell
        from django.contrib.auth import get_user_model
        User = get_user_model()
        User.objects.create_user('kdudka', 'kdudka@redhat.com', 'xxxxxx')
        User.objects.create_superuser('admin', 'kdudka@redhat.com', 'xxxxxx')
- http://covscan-dev/covscanhub/auth/login/ should now work!
- http://covscan-dev/covscanhub/admin/ should be available when logged in as 'admin'!

- install covscan client:
    # yum install covscan-client
    # vim /etc/covscan/covscan.conf
        HUB_URL = "http://covscan-dev/covscanhub/xmlrpc"
        AUTH_METHOD = "password"
        USERNAME = "kdudka"
        PASSWORD = "xxxxxx"

- now we should be able to list mock configs:
    # covscan list-mock-configs

- go at http://covscan-dev/covscanhub/admin/scan/profile/
    - edit the 'default' profile
    - set args to:
        {"analyzers": "", "csmock_args": "--all-tools"}
    - hit 'Save'

- now we should be able to submit tasks using the covscan client:
    # covscan mock-build --config=rhel-7-x86_64 --brew-build curl-7.29.0-25.el7

- prepare worker:
    # adduser coverity -G mock
    # vim /etc/covscan/covscand.conf 
        HUB_URL = "http://covscan-dev/covscanhub/xmlrpc"

- go at http://covscan-dev/covscanhub/admin/hub/worker/add/
    - add worker key from /etc/covscan/covscand.conf
    - select arch 'noarch'
    - select channel 'default'
    - hit 'Save'

- install brew client and dnf:
    # yum-config-manager --add-repo http://download.devel.redhat.com/rel-eng/latest-RCMTOOLS-1-RHEL-7/compose/Server/x86_64/os/
    # yum install brewkoji dnf

- start covscan worker:
    # systemctl enable --now covscand

- the task should be picked and processed!

- get covscanhub logging work:
    # yum install policycoreutils-python-utils
    # semanage fcontext -a -t httpd_log_t /var/log/covscanhub.log
    # install -o apache -g apache -m0660 /dev/null /var/log/covscanhub.log
    # systemctl restart httpd

- initialize release mapping:
    - go at http://covscan-dev/covscanhub/admin/scan/systemrelease/add/
        rhel-7.7                    -> Short tag
        Red Hat Enterprise Linux 7  -> Product name
        7                           -> Release
        -> Save

    - go at http://covscan-dev/covscanhub/admin/scan/tag/add/
        RHEL-7.7                    -> Brew Tag
        3                           -> Mock Config
        1                           -> Release
        -> Save

- allow Errata Tool scans without Kerberos:
    # patch /etc/httpd/conf.d/covscanhub-httpd.conf
--- a/covscanhub/covscanhub-httpd.conf
+++ b/covscanhub/covscanhub-httpd.conf
@@ -19,18 +19,6 @@ WSGISocketPrefix /var/run/wsgi
         IndexOptions FancyIndexing
     </Directory>

-    <Location "/covscanhub/xmlrpc/kerbauth/">
-        AuthType Kerberos
-        AuthName "Covscan XML-RPC Interface"
-        KrbMethodNegotiate on
-        KrbMethodK5Passwd off
-        KrbServiceName HTTP
-        KrbAuthRealms REDHAT.COM
-        Krb5Keytab /etc/httpd/conf/httpd.keytab
-        KrbSaveCredentials off
-        Require valid-user
-    </Location>
-
     <Location "/covscanhub/auth/krb5login/">
         AuthType Kerberos
         AuthName "Covscan WEB-UI Login"

    # systemctl reload httpd

    - go at http://covscan-dev/covscanhub/admin/scan/appsettings/
    - set CHECK_USER_CAN_SUBMIT_SCAN to "N"

- create Errata Scan (without Kerberos) - new pkg:
    # git clone https://gitlab.cee.redhat.com/covscan/covscan.git
    # covsan/covscanhub/scripts/covscan-xmlrpc-client.py --hub http://covscan-dev/covscanhub/xmlrpc/kerbauth/ --username=kdudka --password=xxxxxx create-scan -t curl-7.29.0-25.el7 --et-scan-id 1234 --advisory-id 4567 --owner kdudka --release RHEL-7.7.0 --base NEW_PACKAGE

- create Errata Scan (without Kerberos) - update:
    # covscan/covscanhub/scripts/covscan-xmlrpc-client.py --hub http://covscan-dev/covscanhub/xmlrpc/kerbauth/ --username=kdudka --password=xxxxxx create-scan -t curl-7.29.0-55.el7 --et-scan-id 1234 --advisory-id 4567 --owner kdudka --release RHEL-7.7.0 --base curl-7.29.0-25.el7

- create Errata Scan with Kerberos:
    # covscan/covscanhub/scripts/covscan-xmlrpc-client.py --hub https://covscan-stage.lab.eng.brq2.redhat.com/covscanhub/xmlrpc/kerbauth/ create-scan -t curl-7.29.0-55.el7 --et-scan-id 1234 --advisory-id 4567 --owner kdudka --release RHEL-7.7.0 --base curl-7.29.0-25.el7

- reset password for a user:
    # python3 /usr/lib/python3.6/site-packages/covscanhub/manage.py shell
        >>> from django.contrib.auth import get_user_model
        >>> User = get_user_model()
        >>> u = User.objects.get(username='admin')
        >>> u.set_password('xxxxxx')
        >>> u.save()

- migrating PostgreSQL database from RHEL-7 to RHEL-8:
    # yum install postgresql-upgrade
    # postgresql-setup --upgrade --unit postgresql
    # systemctl start postgresql

- problem with user auth model:
    - set `AUTH_USER_MODEL = 'kobo_auth.User'` in the project settings
    - https://github.com/release-engineering/kobo/issues/34#issuecomment-537086756

``` TODO
finish rewrite to markdown (sorry Kamil)
```

# Development setup of covscan

## Hub

1. Install an el6 server with web server

### Manual setup of environment

2. Prepare environment (packages):

```
$ cd /etc && sudo git clone -b mock git://git.engineering.redhat.com/users/kdudka/coverity-scan.git mock
$ cd /etc/yum.repos.d && sudo curl -O http://cov01.lab.eng.brq.redhat.com/coverity/install/covscan/covscan-rhel.repo
$ sudo yum install http://download.eng.brq.redhat.com/pub/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm
$ sudo yum install --enablerepo=covscan-testing covscan-hub-prod
$ sudo setsebool -P httpd_can_network_connect_db 1
$ sudo chkconfig httpd on
$ sudo service httpd start
```

3. `http://covscan-dev/covscanhub` should now show up!

### docker

2. Alternatively you can run hub in a docker container:

```
$ docker build --tag=covscanhub .
$ docker run --net=host -v $PWD:/source covscan
```

  * You will bind-mount curent sources inside and those will be interpreted,
    it means that you can code and webserver will pick changes on the fly. Neat!

  * --net=host is for getting rid of port mapping/private network nonsense. Trust me,
    it's easier to use host's network for development. You don't need new network stack.

3. You should be now able to access hub in browser: `http://localhost:8000/`


### Database


- sudo yum install postgresql-server
- sudo service postgresql initdb
- sudo vim /var/lib/pgsql/data/pg_hba.conf
    # TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
    local   all         postgres                          ident
    # "local" is for Unix domain socket connections only
    local   all         all                               md5
    # IPv4 local connections:
    host    all         all         127.0.0.1/32          md5
    # IPv6 local connections:
    host    all         all         ::1/128               md5

- sudo chkconfig postgresql on
- sudo service postgresql start
- sudo su - postgres
    psql
    CREATE DATABASE covscanhub;
    CREATE USER "covscanhub" WITH PASSWORD 'velryba';
    GRANT ALL PRIVILEGES ON DATABASE "covscanhub" to "covscanhub";

- sudo /usr/lib/python2.6/site-packages/covscanhub/manage.py syncdb --all
- http://covscan-dev/covscanhub/task/ should now show up!

- sudo /usr/lib/python2.6/site-packages/covscanhub/manage.py shell
    from django.contrib.auth import get_user_model
    User = get_user_model()
    User.objects.create_user('kdudka', 'kdudka@redhat.com', 'xxxxxx')
    User.objects.create_superuser('admin', 'kdudka@redhat.com', 'xxxxxx')
- http://covscan-dev/covscanhub/auth/login/ should now work!
- http://covscan-dev/covscanhub/admin/ should be available when logged in as 'admin'!

- sudo yum install covscan-client
- sudo vim /etc/covscan/covscan.conf
    HUB_URL = "http://covscan-dev/covscanhub/xmlrpc"
    AUTH_METHOD = "password"
    USERNAME = "kdudka"
    PASSWORD = "xxxxxx"
- now we should be able to list mock configs:
    covscan list-mock-configs

- go at http://covscan-dev/covscanhub/admin/hub/arch/add
    type noarch/noarch and save
- go at http://covscan-dev/covscanhub/admin/hub/channel/add/
    type 'default' and save
- go at http://covscan-dev/covscanhub/admin/scan/profile/
    - edit the 'default' profile
    - set args to:
        {"analyzers": "", "csmock_args": "--all-tools"}
    - hit 'Save'
- now we should be able to submit tasks using the covscan client:
    covscan mock-build --brew-build curl-7.29.0-25.el7

- sudo adduser coverity
- sudo gpasswd -a coverity mock
- sudo vim /etc/covscan/covscand.conf 
    HUB_URL = "http://covscan-dev/covscanhub/xmlrpc"
- go at http://covscan-dev/covscanhub/admin/hub/worker/add/
    - add worker key from /etc/covscan/covscand.conf
    - FIXME: name needs to match worker's FQDN but needs to be at most 30 chars long
    - select arch 'noarch'
    - select channel 'default'
    - hit 'Save'
- sudo yum install http://download.devel.redhat.com/brewroot/packages/brewkoji/1.9/1.el6eng/noarch/brewkoji-1.9-1.el6eng.noarch.rpm
- sudo chkconfig covscand on
- sudo service covscand start
- the task should be picked and processed!

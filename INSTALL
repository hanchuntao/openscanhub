- install an el7 server
- enable EPEL-7 and Covscan repos:
    # yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    # cd /etc/yum.repos.d \
        && curl -O https://copr.devel.redhat.com/coprs/kdudka/mock/repo/epel-7/kdudka-mock-epel-7.repo \
        && curl -O https://copr.devel.redhat.com/coprs/kdudka/covscan/repo/epel-7/kdudka-covscan-epel-7.repo \
        && curl -O https://copr.devel.redhat.com/coprs/kdudka/covscan-testing/repo/epel-7/kdudka-covscan-testing-epel-7.repo

- install needed packages:
    # yum install covscan-hub-prod mod_ssl python2-django16 boost-python

- temporarily disable TLS:
    # patch /etc/httpd/conf.d/covscanhub-httpd.conf
--- prod-covscanhub-httpd.conf  2019-06-05 11:47:41.278000445 +0200
+++ covscanhub-httpd.conf       2019-09-19 18:56:45.424947499 +0200
@@ -2,22 +2,11 @@ ServerName localhost
 WSGISocketPrefix /var/run/wsgi
 
 <VirtualHost *:80>
-    RewriteEngine On
-    RewriteCond %{HTTPS} off
-    RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
-</VirtualHost>
-
-<VirtualHost *:443>
     # WSGI handler
     WSGIDaemonProcess covscan display-name=%{GROUP}
     WSGIProcessGroup covscan
     WSGIScriptAlias /covscanhub /usr/lib/python2.7/site-packages/covscanhub/covscanhub.wsgi process-group=covscan
 
-    SSLEngine on
-    SSLCertificateFile      /etc/httpd/conf/cov01.lab.eng.brq.redhat.com-ssl/cov01.lab.eng.brq.redhat.com.crt
-    SSLCertificateKeyFile   /etc/httpd/conf/cov01.lab.eng.brq.redhat.com-ssl/cov01.lab.eng.brq.redhat.com.key
-    SSLCertificateChainFile /etc/httpd/conf/cov01.lab.eng.brq.redhat.com-ssl/cov01.lab.eng.brq.redhat.com-ca.crt
-
     # needed for Apache 2.4
     <Directory "/usr/lib/python2.7/site-packages/covscanhub">
         Require all granted

- tweak django setttings:
    # echo "ALLOWED_HOSTS = ['covscan-dev']" >> /usr/lib/python2.7/site-packages/covscanhub/settings.py

- start httpd:
    # setsebool -P httpd_can_network_connect 1
    # systemctl enable --now httpd
    # firewall-cmd --zone=public --add-port=80/tcp --permanent
    # firewall-cmd --reload

- http://covscan-dev/covscanhub should now show up!

- install postgresql:
    # yum install postgresql-server
    # postgresql-setup initdb
    # vim /var/lib/pgsql/data/pg_hba.conf
        # TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD
        local   all         postgres                          ident
        # "local" is for Unix domain socket connections only
        local   all         all                               md5
        # IPv4 local connections:
        host    all         all         127.0.0.1/32          md5
        # IPv6 local connections:
        host    all         all         ::1/128               md5

    # systemctl enable --now postgresql
    # su - postgres -c psql
        CREATE DATABASE covscanhub;
        CREATE USER "covscanhub" WITH PASSWORD 'velryba';
        GRANT ALL PRIVILEGES ON DATABASE "covscanhub" to "covscanhub";

- initialize django:
    # /usr/lib/python2.7/site-packages/covscanhub/manage.py syncdb --all

- http://covscan-dev/covscanhub/task/ should now show up!

- create users:
    # /usr/lib/python2.7/site-packages/covscanhub/manage.py shell
        from django.contrib.auth import get_user_model
        User = get_user_model()
        User.objects.create_user('kdudka', 'kdudka@redhat.com', 'xxxxxx')
        User.objects.create_superuser('admin', 'kdudka@redhat.com', 'xxxxxx')
- http://covscan-dev/covscanhub/auth/login/ should now work!
- http://covscan-dev/covscanhub/admin/ should be available when logged in as 'admin'!

- install covscan client:
    # yum install covscan-client
    # vim /etc/covscan/covscan.conf
        HUB_URL = "http://covscan-dev/covscanhub/xmlrpc"
        AUTH_METHOD = "password"
        USERNAME = "kdudka"
        PASSWORD = "xxxxxx"

- now we should be able to list mock configs:
    # covscan list-mock-configs

- go at http://covscan-dev/covscanhub/admin/scan/profile/
    - edit the 'default' profile
    - set args to:
        {"analyzers": "", "csmock_args": "--all-tools"}
    - hit 'Save'

- now we should be able to submit tasks using the covscan client:
    # covscan mock-build --config=rhel-7-x86_64 --brew-build curl-7.29.0-25.el7

- prepare worker:
    # adduser coverity -G mock
    # vim /etc/covscan/covscand.conf 
        HUB_URL = "http://covscan-dev/covscanhub/xmlrpc"

- go at http://covscan-dev/covscanhub/admin/hub/worker/add/
    - add worker key from /etc/covscan/covscand.conf
    - select arch 'noarch'
    - select channel 'default'
    - hit 'Save'

- install brew client and dnf:
    # yum-config-manager --add-repo http://download.devel.redhat.com/rel-eng/latest-RCMTOOLS-1-RHEL-7/compose/Server/x86_64/os/
    # yum install brewkoji dnf

- start covscan worker:
    # systemctl enable --now covscand

- the task should be picked and processed!

- get covscanhub logging work:
    # yum install policycoreutils-python
    # semanage fcontext -a -t httpd_log_t /var/log/covscanhub.log
    # install -o apache -g apache -m0660 /dev/null /var/log/covscanhub.log
    # systemctl restart httpd

- initialize release mapping:
    - go at http://covscan-dev/covscanhub/admin/scan/systemrelease/add/
        rhel-7.7                    -> Short tag
        Red Hat Enterprise Linux 7  -> Product name
        7                           -> Release
        -> Save

    - go at http://covscan-dev/covscanhub/admin/scan/tag/add/
        RHEL-7.7                    -> Brew Tag
        3                           -> Mock Config
        1                           -> Release
        -> Save

- allow Errata Tool scans without Kerberos:
    # patch /etc/httpd/conf.d/covscanhub-httpd.conf
--- a/covscanhub/covscanhub-httpd.conf
+++ b/covscanhub/covscanhub-httpd.conf
@@ -19,18 +19,6 @@ WSGISocketPrefix /var/run/wsgi
         IndexOptions FancyIndexing
     </Directory>

-    <Location "/covscanhub/xmlrpc/kerbauth/">
-        AuthType Kerberos
-        AuthName "Covscan XML-RPC Interface"
-        KrbMethodNegotiate on
-        KrbMethodK5Passwd off
-        KrbServiceName HTTP
-        KrbAuthRealms REDHAT.COM
-        Krb5Keytab /etc/httpd/conf/httpd.keytab
-        KrbSaveCredentials off
-        Require valid-user
-    </Location>
-
     <Location "/covscanhub/auth/krb5login/">
         AuthType Kerberos
         AuthName "Covscan WEB-UI Login"

    # systemctl reload httpd

    - go at http://covscan-dev/covscanhub/admin/scan/appsettings/
    - set CHECK_USER_CAN_SUBMIT_SCAN to "N"

- create Errata Scan (without Kerberos) - new pkg:
    # git clone https://gitlab.cee.redhat.com/covscan/covscan.git
    # covsan/covscanhub/scripts/xmlrpc.py --hub http://covscan-dev/covscanhub/xmlrpc/kerbauth/ --username=kdudka --password=xxxxxx create-scan -t curl-7.29.0-25.el7 --et-scan-id 1234 --advisory-id 4567 --owner kdudka --release RHEL-7.7.0 --base NEW_PACKAGE

- create Errata Scan (without Kerberos) - update:
    # covscan/covscanhub/scripts/xmlrpc.py --hub http://covscan-dev/covscanhub/xmlrpc/kerbauth/ --username=kdudka --password=xxxxxx create-scan -t curl-7.29.0-55.el7 --et-scan-id 1234 --advisory-id 4567 --owner kdudka --release RHEL-7.7.0 --base curl-7.29.0-25.el7

- create Errata Scan with Kerberos:
    # covscan/covscanhub/scripts/xmlrpc.py --hub https://covscan-stage.lab.eng.brq2.redhat.com/covscanhub/xmlrpc/kerbauth/ create-scan -t curl-7.29.0-55.el7 --et-scan-id 1234 --advisory-id 4567 --owner kdudka --release RHEL-7.7.0 --base curl-7.29.0-25.el7

- reset password for a user:
    >>> from django.contrib.auth import get_user_model
    >>> User = get_user_model()
    >>> u = User.objects.get(username='admin')
    >>> u.set_password('xxxxxx')
    >>> u.save()

- migrating PostgreSQL database from RHEL-6 to RHEL-7:
    # service postgresql stop
    # rm -v /var/lib/pgsql/data/postmaster.pid
    # yum install postgresql-upgrade
    # postgresql-setup upgrade
    # systemctl start postgresql

- migrating old database scheme (using South):
    # /usr/lib/python2.7/site-packages/covscanhub/manage.py migrate kobo.django.auth

- migrating old database scheme (directly):
    # su -c psql postgres
        \connect covscanhub
        ALTER TABLE auth_user_groups RENAME COLUMN longnameuser_id TO user_id;
        ALTER TABLE auth_user_user_permissions RENAME COLUMN longnameuser_id TO user_id;
        ALTER TABLE hub_worker ADD COLUMN min_priority integer CHECK (min_priority >= 0);

- problem with user auth model:
    - set `AUTH_USER_MODEL = 'kobo_auth.User'` in the project settings
    - https://github.com/release-engineering/kobo/issues/34#issuecomment-537086756
